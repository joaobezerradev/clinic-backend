datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Specialization {
  CARDIOLOGY
  DERMATOLOGY
  GENERAL_PRACTICE
  NEUROLOGY
  PEDIATRICS
  PSYCHIATRY
  PHYSIOTHERAPY
  NUTRITION
}

enum DocumentType {
  CRM
  CRN
  CREFITO
}

enum Role {
  PATIENT
  PROFESSIONAL
  ADMIN
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  username       String        @unique
  password       String
  role           Role
  patient        Patient?      @relation(fields: [patientId], references: [id])
  professional   Professional? @relation(fields: [professionalId], references: [id])
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  patientId      String?       @map("patient_id") @db.ObjectId
  professionalId String?       @map("professional_id") @db.ObjectId

  @@map("user")
}

model Address {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  postalCode   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  patientId String    @map("patient_id") @db.ObjectId
  Patient   Patient[]

  @@map("address")
}

model Patient {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  surname      String
  email        String
  phone        String
  birthdate    DateTime      @db.Date
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  appointments Appointment[]
  User         User[]
  Address      Address       @relation(fields: [addressId], references: [id])
  addressId    String        @db.ObjectId

  @@index([email], name: "idx_patient_email")
  @@map("patient")
}

model Professional {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  surname        String
  document       String
  documentType   DocumentType   @map("document_type")
  specialization Specialization
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  appointments   Appointment[]
  User           User[]

  @@index([document], name: "idx_professional_document")
  @@map("professional")
}

model Place {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  street       String
  neighborhood String
  number       String
  complement   String
  state        String
  city         String
  postalCode   String
  rooms        Room[]
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("place")
}

model Room {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  appointments Appointment[]
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  Place        Place         @relation(fields: [placeId], references: [id])
  placeId      String        @map("place_id") @db.ObjectId

  @@map("room")
}

model Appointment {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  date           DateTime
  patientId      String        @map("patient_id") @db.ObjectId
  professionalId String        @map("professional_id") @db.ObjectId
  roomId         String        @map("room_id") @db.ObjectId
  paymentId      String        @map("payment_id") @db.ObjectId
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  patient        Patient       @relation(fields: [patientId], references: [id])
  professional   Professional  @relation(fields: [professionalId], references: [id])
  room           Room          @relation(fields: [roomId], references: [id])
  payment        Payment       @relation(fields: [paymentId], references: [id])
  Examination    Examination[]

  @@index([date], name: "idx_appointment_date")
  @@index([patientId], name: "idx_appointment_patientId")
  @@index([professionalId], name: "idx_appointment_professionalId")
  @@index([roomId], name: "idx_appointment_roomId")
  @@map("appointment")
}

enum PaymentStatus {
  PAID
  CANCELED
  PENDING
  REFUNDED
}

enum PaymentType {
  CREDIT_CARD
  DEBIT_CARD
  BANK_SLIP
  PIX
}

model Payment {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  patientId   String        @map("patient_id")
  amount      Int
  date        DateTime
  type        PaymentType   @map("type")
  status      PaymentStatus @map("status")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  Appointment Appointment[]

  @@map("payment")
}

enum ExaminationType {
  BLOOD_TEST
  X_RAY
  ULTRASOUND
  MRI
  CT_SCAN
}

model Examination {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  type          ExaminationType
  result        String?
  date          DateTime
  appointmentId String          @map("appointment_id") @db.ObjectId
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  appointment   Appointment     @relation(fields: [appointmentId], references: [id])

  @@map("examination")
}
