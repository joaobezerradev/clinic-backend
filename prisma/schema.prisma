generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  PATIENT
  DOCTOR
}

model Account {
  id       String @id @db.Uuid
  email    String @unique
  password String
  role     Role

  Patient      Patient[]
  Professional Professional[]

  createdAt DateTime
  updatedAt DateTime?

  deletedAt DateTime?
}

model Patient {
  id           String  @id @db.Uuid
  name         String
  accountId    String  @unique @db.Uuid
  document     String  @unique
  phone        String
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  postalCode   String
  birthdate    String

  account      Account       @relation(fields: [accountId], references: [id])
  appointments Appointment[]

  createdAt DateTime
  updatedAt DateTime?
  deletedAt DateTime?
}

enum Specialty {
  CARDIOLOGY
  DERMATOLOGY
  ENDOCRINOLOGY
  GASTROENTEROLOGY
  GENERAL_PRACTICE
  NEUROLOGY
  ONCOLOGY
  OPHTHALMOLOGY
  ORTHOPEDICS
  PEDIATRICS
  PSYCHIATRY
  RADIOLOGY
  SURGERY
  UROLOGY
}

enum ProfessionalType {
  DOCTOR
  PHYSIOTHERAPIST
  NUTRITIONIST
}

model Professional {
  id               String           @id @db.Uuid
  accountId        String           @unique @db.Uuid
  specialty        Specialty
  professionalType ProfessionalType
  availability     Boolean          @default(true)
  account          Account          @relation(fields: [accountId], references: [id])
  appointments     Appointment[]

  createdAt DateTime
  updatedAt DateTime?

  deletedAt DateTime?
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELED
}

model Appointment {
  id             String            @id @db.Uuid
  date           DateTime
  status         AppointmentStatus
  patientId      String            @db.Uuid
  professionalId String            @db.Uuid
  patient        Patient           @relation(fields: [patientId], references: [id])
  professional   Professional      @relation(fields: [professionalId], references: [id])
  room           Room              @relation(fields: [roomId], references: [id])
  roomId         String            @db.Uuid

  createdAt DateTime
  updatedAt DateTime?

  deletedAt DateTime?

  @@unique([date, patientId, professionalId, roomId])
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
}

model Room {
  id           String        @id @db.Uuid
  name         String        @unique
  status       RoomStatus
  description  String?
  placeId      String        @db.Uuid
  place        Place         @relation(fields: [placeId], references: [id])
  appointments Appointment[]

  createdAt DateTime
  updatedAt DateTime?

  deletedAt DateTime?
}

model Place {
  id    String @id @db.Uuid
  name  String
  code  String @unique
  rooms Room[]

  createdAt DateTime
  updatedAt DateTime?

  deletedAt DateTime?
}
